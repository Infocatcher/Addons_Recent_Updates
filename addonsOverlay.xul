<?xml version="1.0"?>
<overlay xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<script type="application/javascript">
	<![CDATA[
	window.addEventListener("DOMContentLoaded", function patch(e) {
		window.removeEventListener(e.type, patch, false);
		// See chrome://mozapps/content/extensions/extensions.js
		// We can't redeclare or change "const UPDATES_RECENT_TIMESPAN".
		// But we can redeclare gUpdatesView._showRecentUpdates in scope with another UPDATES_RECENT_TIMESPAN.
		const UPDATES_RECENT_TIMESPAN = {
			valueOf: function() { // Trick to always get actual value from preferences
				return Services.prefs.getIntPref("extensions.addonsRecentUpdates.days")*24*3600000;
			}
		};
		// We don't modify original function, so eval is safe.
		var origShowRecentUpdates = gUpdatesView._showRecentUpdates;
		eval("gUpdatesView._showRecentUpdates = " + (function() { // Hide our variables from eval() scope
			var src = origShowRecentUpdates.toString();
			if(
				origShowRecentUpdates.name
				&& !/^function[\s(]/.test(src) // Not starts with "function"
			) // Looks like _showRecentUpdates(aRequest) { ... }
				return "function " + src;
			return src;
		})());
		(function() { // Someone may want to do eval() patch...
			var f = gUpdatesView._showRecentUpdates;
			function patch(s) {
				return s.replace(
					/\{(?:\s*("|')use strict\1;)?/,
					'$&\n\tvar UPDATES_RECENT_TIMESPAN = Services.prefs.getIntPref("extensions.addonsRecentUpdates.days")*24*3600000;'
				);
			}
			f.toString = function() {
				return patch(origShowRecentUpdates.toString());
			};
			f.toSource = function() {
				return patch(origShowRecentUpdates.toSource());
			};
		})();
	}, false);
	]]>
	</script>
</overlay>